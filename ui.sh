#!/bin/bash
#This is the user interface of Bacys. You are just giving some parameters of configuration and script does your work for you!
read_src_folders () {
	echo "Enter the list of directories you want to back up separated by space:"
	read -a SRC_DIR
	declare -a BAD_SRC_DIR
	for dir in "${SRC_DIR[@]}"
	do
		if [ ! -d "$dir" ]
	then
		BAD_SRC_DIR=("${BAD_SRC_DIR[@]}" "$dir")
	fi
	done 
	if [ ${#BAD_SRC_DIR[@]} -gt 0 ]
	then
		echo "The following folders do not exist or can not be read: ${badfldr[@]}"
		echo " $(tput setaf 1) $(tput bold)Please try again $(tput sgr0)"
		read_src_folders
	else
		echo " $(tput setaf 2) OK. All folders are accessible. Next step.. $(tput sgr0)"
	fi
}

read_local_dir () {
	echo "Please enter path to the folder to store backups in:"
	read DST_DIR
	if [ -w $DST_DIR ]
	then
		echo " $(tput setaf 2) OK. Folder exists and is writable. Next step.. $(tput sgr0)"
	else
		echo " $(tput setaf 1) $(tput bold)Folder does not exist or is not writable. $(tput sgr0)"
		echo " $(tput setaf 1) $(tput bold)Please try again. $(tput sgr0)"
		read_local_dir
	fi
}

read_ftp_cred () {
	read -p "Host address: " FTP_HOST
	read -p "Username: " FTP_USER
	read -s -p "Password: " FTP_PASS; echo
	read -p "Please enter remote directory: " DST_DIR

	#Check provided FTP credentials and folder
	ftp_test=ftp_test_`date +%s`.tmp
	ftp_log=ftp_cred_test.log
	echo "ftp_test" > $ftp_test
	ftp -invp $FTP_HOST << END_FTP > $ftp_log
		user $FTP_USER $FTP_PASS 
		cd $DST_DIR
		put $ftp_test
		del $ftp_test
		bye 
END_FTP
	if grep -q "550 " $ftp_log
	then
		ftp_resp=" $(tput setaf 1) $(tput bold)Failed to change to destination directory $(tput sgr0)"
	elif grep -q "553 " $ftp_log
	then
		ftp_resp=" $(tput setaf 1) $(tput bold)Failed to write to destination folder $(tput sgr0)"
	elif grep -q "226 " $ftp_log
	then
		ftp_resp=" $(tput setaf 1) $(tput bold)FTP check OK $(tput sgr0)"
	elif grep -q "530 " $ftp_log
	then
		ftp_resp=" $(tput setaf 1) $(tput bold)Login incorrect $(tput sgr0)"
	else
		ftp_resp=" $(tput setaf 1) $(tput bold)Can't connect. Check server address $(tput sgr0)"
	fi
	echo $ftp_resp
}

read_scp_cred () {
	read -p "Host address: " SCP_HOST
	read -p "Username: " SCP_USER
	#read -s -p "Password: " SCP_PASS; echo
	read -p "Please enter remote directory: " DST_DIR
	scp_test=scp_test_`date +%s`.tmp
	echo "scp_test" > $scp_test
	scp $scp_test $SCP_USER'@'$SCP_HOST':'$DST_DIR
	if [ $? -ne 0 ]
	then
		echo -e " $(tput setaf 1) $(tput bold)Error occured.\n $(tput sgr0)"
	else
		echo -e " $(tput setaf 2) SCP credentials are OK.\n $(tput sgr0)"
	fi
	rm $scp_test
}

read_dst_option () {
	while :
	do
	echo "Where do you want to store your backups?"
	echo -e "1. Local folder/mount point.\n2. SCP to remote machine.\n3. FTP to remote machine.\n4. RSYNC to remote machine.\n5. SFTP to remote machine.\n"
	read -p "Enter the number of your choice: " BCKOPT
	case $BCKOPT in
		1) read_local_dir; break;;
		2) read_scp_cred; break;;
		3) read_ftp_cred; break;;
		4) echo "Calls function to read rsync options."; break;;
		5) echo "Calls function to read sftp credentials."; break;;
		*) echo " $(tput setaf 1) $(tput bold)Please enter number in range [1-5] $(tput sgr0)"
	echo "Press Enter to continue. . ."; read ;;
	esac
	done
}

create_backup_script () {
	bkp_nm=backup_`date +%d%m%y`
	i=$((`ls -1 | grep $bkp_nm.*\.sh$ | wc -l`+1))
	bkp_script_name=$bkp_nm"_"$i".sh"
	bkp_file_name=$bkp_nm"_"$i".tar.gz"
	echo "#This is backup script generated by Bacys." > $bkp_script_name
	echo "tar czf "$bkp_file_name" "${SRC_DIR[@]} >> $bkp_script_name
	case $BCKOPT in
		1) echo "mv $bkp_file_name $DST_DIR" >> $bkp_script_name;;
		2) echo "scp $bkp_file_name $SCP_USER'@'$SCP_HOST':'$DST_DIR" >> $bkp_script_name;;
		3) echo -e "ftp -inp $FTP_HOST << END_FTP\nuser $FTP_USER $FTP_PASS\ncd $DST_DIR\nput $bkp_file_name\nbye\nEND_FTP\nrm $bkp_file_name" >> $bkp_script_name;;
		4) echo "Calls function to read rsync options."; break;;
		5) echo "Calls function to read sftp credentials."; break;;
	esac 
	chmod +x $bkp_script_name
}

read_cron_option () {
	command=`pwd`"/"$bkp_script_name
	echo "Do you want to schedule your backup to run periodically?"
	read ANSWER
	until [[ "$ANSWER" = [yYnN] ]];
	do
		echo " $(tput setaf 1) $(tput bold)You've entered the wrong parameter. Use only y for yes and n for no $(tput sgr0)"
		read ANSWER
	done
	if [[ $ANSWER = [yY] ]]; then
		echo "Please specify periodicity of backup if you want to schedule it."
		echo -e "1. Hourly\n2. Daily\n3. Weekdays only\n4. Weekly\n5. Monthly"
		read ANSWER
		until [[ "$ANSWER" = [12345] ]];
		do
			echo " $(tput setaf 1) $(tput bold)You've entered the wrong parameter. Please enter the number of your choice from range 1-5. $(tput sgr0)"
			read ANSWER
		done
		case $ANSWER in
			1) job="0 * * * * $command";;
			2) job="0 0 * * * $command";;
			3) job="0 0 * * 1-5 $command";;
			4) job="0 0 * * 0 $command";;
			5) job="0 0 1 * * $command";;
		esac
	cat <(fgrep -i -v "$command" <(crontab -l)) <(echo "$job") | crontab -
	fi
}

read_src_folders
read_dst_option
create_backup_script
read_cron_option
echo "Do you want to start the backup process? (Y/N)"
read ANSWER
until [[ "$ANSWER" = [yYnN] ]];
do
	echo " $(tput setaf 1) $(tput bold)You've entered the wrong parameter. Use only y for yes and n for no $(tput sgr0)"
	read ANSWER
done
case $ANSWER in
	[yY]) sh $bkp_script_name;;
	 [nN]) echo " $(tput setaf 2) Your configuration file has been created $(tput sgr0)";;
esac